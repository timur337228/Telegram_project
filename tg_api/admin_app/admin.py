import asyncio
from tg_api.models.db_helper import create_product, get_products_by_type, get_all_products, \
    update_product, delete_product_active
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F, Router
from aiogram.types import Message
from aiogram.filters import CommandStart
from tg_api.func import check_db
from tg_api.admin_app.constants import ADMIN_ID
import tg_api.admin_app.keyboards as admin_kb

id_del = 0
id_edit = 0
status = ''
edit_b = False
step_edit = ''
step_create = 0
admin_text = [
    '–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞', '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞',
    '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞(–µ—Å–ª–∏ –≤–∞—à —Ç–æ–≤–∞—Ä –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è, –≤–≤–µ–¥–∏—Ç–µ "null")',
    '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞', '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞(–Ø –¥–∏—Å–∫, Google)',
    '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –ø–æ—Å—Ç, –ø—Ä–æ —Ç–æ–≤–∞—Ä',
    '–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–µ—Ç—Å—è...',
]
admin_router = Router(name='admin')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π new_product
new_product = []


@admin_router.message(CommandStart(), F.from_user.id == ADMIN_ID)
async def send_welcome_start(message: Message):
    await check_db()
    await message.answer("–°–∞–ª–∞–º, –∞–¥–º–∏–Ω", reply_markup=admin_kb.start)


@admin_router.message(F.from_user.id == ADMIN_ID, F.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä')
async def send_welcome_create(message: Message):
    global status
    await check_db()
    status = 'edit'
    await message.answer('–í–≤–µ–¥–∏—Ç–µ id —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.', reply_markup=admin_kb.back)


@admin_router.message(F.from_user.id == ADMIN_ID, F.text == '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä')
async def send_welcome_create(message: Message):
    global status
    await check_db()
    status = 'delete'
    await message.answer('–í–≤–µ–¥–∏—Ç–µ id —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.', reply_markup=admin_kb.back)


@admin_router.message(F.from_user.id == ADMIN_ID, F.text == '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä')
async def send_welcome_create(message: Message):
    global status
    await check_db()
    status = 'active'
    await message.answer('–í–≤–µ–¥–∏—Ç–µ id —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å.', reply_markup=admin_kb.back)


@admin_router.message(F.from_user.id == ADMIN_ID, F.text == '–°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä')
async def send_welcome_create(message: Message):
    global status
    await check_db()
    status = 'create'
    await message.answer(admin_text[step_create], reply_markup=admin_kb.back)


@admin_router.message(F.from_user.id == ADMIN_ID, F.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞')
async def send_welcome_create(message: Message):
    global status
    await check_db()
    status = 'see_products_by_type'
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞.', reply_markup=admin_kb.back)


@admin_router.message(F.from_user.id == ADMIN_ID, F.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã')
async def send_welcome_create(message: Message):
    await check_db()
    products = await get_all_products()
    if not (products == []):
        await message.reply("–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–π —Å–∫—Ä–∏–ø—Ç —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å?")
        for product in products:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text='–°–∫–∞—á–∞—Ç—åüëæ', url=product.url_download),
                        InlineKeyboardButton(text='–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç?', url=product.url_guide),
                    ]
                ],
                resize_keyboard=True,
                one_time_keyboard=False,
            )
            await message.answer(
                f'id: {product.id}\n\n'
                f'–¢–∏–ø: {product.type_product}\n\n'
                f'–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name.capitalize()}\n\n'
                f'–û–ø–∏—Å–∞–Ω–∏–µ: {product.description.capitalize()}\n\n'
                f'–¶–µ–Ω–∞: {product.price}‚ÇΩ\n\n'
                f'–ê–∫—Ç–∏–≤–Ω–æ: {product.active}\n\n',
                reply_markup=keyboard
            )
    else:
        await message.answer('–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø—É—Å—Ç')


@admin_router.message(F.from_user.id == ADMIN_ID, F.text == '–ù–∞–∑–∞–¥')
async def send_welcome_back(message: Message):
    global step_create, status, edit_b, step_edit
    await check_db()
    if status == 'create':
        if step_create > 0:
            del new_product[-1]
            step_create -= 1
            await message.answer(admin_text[step_create], reply_markup=admin_kb.back)
        else:
            status = ''
            await message.answer("–°–∞–ª–∞–º, –∞–¥–º–∏–Ω", reply_markup=admin_kb.start)
    elif status == 'edit':
        if step_edit != '':
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:', reply_markup=admin_kb.edit_product)
            step_edit = ''
        elif edit_b:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ id —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.', reply_markup=admin_kb.back)
            edit_b = False
        else:
            status = ''
            await message.answer("–°–∞–ª–∞–º, –∞–¥–º–∏–Ω", reply_markup=admin_kb.start)
    elif status in ['delete', 'active', 'see_products_by_type']:
        status = ''
        await message.answer("–°–∞–ª–∞–º, –∞–¥–º–∏–Ω", reply_markup=admin_kb.start)
    # else:
    #     await message.answer("–°–∞–ª–∞–º, –∞–¥–º–∏–Ω", reply_markup=admin_kb.start)


@admin_router.message(F.from_user.id == ADMIN_ID,
                      F.text.lower().in_(('—Ç–∏–ø', '–∏–º—è', '–æ–ø–∏—Å–∞–Ω–∏–µ', '—Ü–µ–Ω–∞', '—Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è',
                                          '—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç –ø—Ä–æ —Å–∫—Ä–∏–ø—Ç')))
async def send_welcome_back(message: Message):
    await check_db()
    global step_edit
    step_edit = message.text
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ {message.text.lower()}')
    print(step_edit)


@admin_router.message(F.from_user.id == ADMIN_ID)
async def send_welcome_step(message: Message):
    global step_create, new_product, status, id_edit, edit_b, id_del, step_edit
    await check_db()
    if status == 'create':
        step_create += 1
        await message.answer(admin_text[step_create])
        n = message.text.strip()
        if step_create == 3 and n.lower() == 'null':
            new_product.append(None)
        else:
            new_product.append(n)
        if step_create == 6:
            step_create = 0
            try:
                await create_product(type_product=new_product[0], name=new_product[1], description=new_product[2],
                                     price=int(new_product[3]),
                                     url_download=new_product[4], url_guide=new_product[5])
                await message.answer('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', reply_markup=admin_kb.start)
                new_product.clear()
            except Exception as e:
                await message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}')
    elif status == 'edit':
        if edit_b is False:
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:', reply_markup=admin_kb.edit_product)
            id_edit = int(message.text)
            edit_b = True
            return
        try:
            if step_edit == '–¢–∏–ø':
                await update_product(id=id_edit, type=message.text)
                step_edit = ''
            elif step_edit == '–ò–º—è':
                await update_product(id=id_edit, name=message.text)
                step_edit = ''
            elif step_edit == '–û–ø–∏—Å–∞–Ω–∏–µ':
                await update_product(id=id_edit, description=message.text)
                step_edit = ''
            elif step_edit == '–¶–µ–Ω–∞':
                await update_product(id=id_edit, price=int(message.text))
                step_edit = ''
            elif step_edit == '–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è':
                await update_product(id=id_edit, url_download=message.text)
                step_edit = ''
            elif step_edit == '–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç –ø—Ä–æ —Å–∫—Ä–∏–ø—Ç':
                await update_product(id=id_edit, url_guide=message.text)
                step_edit = ''
            else:
                return
            await message.answer('–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')
        except Exception:
            await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    elif status == 'delete':
        try:
            await delete_product_active(id=int(message.text), b=False)
            await message.answer('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!', reply_markup=admin_kb.start)
            status = ''
        except Exception:
            await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞', reply_markup=admin_kb.start)
    elif status == 'active':
        try:
            await delete_product_active(id=int(message.text), b=True)
            await message.answer('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!', reply_markup=admin_kb.start)
            status = ''
        except Exception:
            await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞', reply_markup=admin_kb.start)
    elif status == 'see_products_by_type':
        products = await get_products_by_type(message.text)
        if not (products == []):
            await message.reply("–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–π —Å–∫—Ä–∏–ø—Ç —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å?")
            for product in products:
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text='–°–∫–∞—á–∞—Ç—åüëæ', url=product.url_download),
                            InlineKeyboardButton(text='–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç?', url=product.url_guide),
                        ]
                    ],
                    resize_keyboard=True,
                    one_time_keyboard=False,
                )
                await message.answer(
                    f'id: {product.id}\n\n'
                    f'–¢–∏–ø: {product.type_product}\n\n'
                    f'–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name.capitalize()}\n\n'
                    f'–û–ø–∏—Å–∞–Ω–∏–µ: {product.description.capitalize()}\n\n'
                    f'–¶–µ–Ω–∞: {product.price}‚ÇΩ\n\n'
                    f'–ê–∫—Ç–∏–≤–Ω–æ: {product.active}\n\n',
                    reply_markup=keyboard
                )
        else:
            await message.answer('–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø—É—Å—Ç')
        status = ''
    else:
        await message.answer('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–æ–º–∞–Ω–¥–∞', reply_markup=admin_kb.start)
