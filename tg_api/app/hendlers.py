from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message
from aiogram.filters import CommandStart
from tg_api.func import check_db, check_sub
import tg_api.app.keyboards as kb
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from tg_api.models.db_helper import get_products_by_type, get_all_types

main_router = Router(name='main')
types = []


# async def main():
#     async with engine.begin() as conn:
#         await conn.run_sync(Base.metadata.create_all)
#     # product_id = await create_product(name='NAME', type_product='Blum', description='s', price=122,
#     #                                   url_download='asdasda', url_guide='asddasd')
#     # print(f"–°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä —Å ID: {product_id}")


@main_router.message(CommandStart())
async def send_welcome(message: Message):
    global types
    await check_db()
    for i in await get_all_types():
        types.append(i)
    await message.reply("–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π –≤ –∫—Ä–∏–ø—Ç–æ –∏–≥—Ä–∞—Ö.üí∞")
    await message.answer("–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ñ—Ç:",
                         reply_markup=await kb.init_types())


@main_router.message(F.text.in_(types))  # types ['Blum']
async def main_func(message: Message):
    await check_db()
    if await check_sub(message):
        products = await get_products_by_type(message.text)
        if not (products == []):
            await message.reply("–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–π —Å–∫—Ä–∏–ø—Ç —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å?üì±", reply_markup=kb.back)
            for product in products:
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text='–°–∫–∞—á–∞—Ç—å!üëæ', url=product.url_download),
                            InlineKeyboardButton(text='–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç?üîÆ', url=product.url_guide),
                        ]
                    ],
                    resize_keyboard=True,
                    one_time_keyboard=False,
                )
                await message.answer(
                    f'üî•<b>{product.name.capitalize()}</b>\n\n'
                    f'‚ÑπÔ∏è<i>{product.description.capitalize()}</i>\n\n'
                    f'üí∏–¶–µ–Ω–∞: <b>{product.price}</b>‚ÇΩ',
                    reply_markup=keyboard,
                    parse_mode='HTML',)
        else:
            await message.answer('–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø—É—Å—Çüòî')
    else:
        await message.answer("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –ø—Ä–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µüîÆüëæ", reply_markup=kb.link_chanel)


@main_router.message(F.text == '–ù–∞–∑–∞–¥')
async def back(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –∏–≥—Ä—Éüëæ, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ñ—Ç:",
                         reply_markup=await kb.init_types())
